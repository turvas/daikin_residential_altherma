
 * * * * * * INSERIMENTO DI UN NUOVO SENSORE  * * * * * *


1) const.py: Aggiungere una costante ATTR battezzandone il 
	nuovo nome, es:

	ATTR_TANK_TEMPERATURE = "tankTemperature"


2) const.py: Aggiungere il CMD_SET con il percorso MP,DP e 
	Value:

	DAIKIN_CMD_SETS = {
		...
		ATTR_TANK_TEMPERATURE: [MP_DOMESTIC_HWT, DP_SENSORS, "/tankTemperature"],


	dove "/tankTemperature" deve corrispondere al JSON:

                "sensoryData": {
                    "ref": "#sensoryData",
                    "settable": false,
                    "value": {
                        "tankTemperature": {
                            "maxValue": 127,
                            "minValue": -127,
                            "requiresReboot": false,
                            "settable": false,
                            "stepValue": 1,
                            "value": 38


3) const.py: nei SENSOR_TYPES aggiungere la definizione del nuovo sensore:


	SENSOR_TYPES = {
		...
		ATTR_TANK_TEMPERATURE: {
			CONF_NAME: "Tank Temperature",
			CONF_TYPE: SENSOR_TYPE_TEMPERATURE,
			CONF_DEVICE_CLASS: DEVICE_CLASS_TEMPERATURE,
			CONF_UNIT_OF_MEASUREMENT: TEMP_CELSIUS,
		},


4) daikin_base.py: aggiungere l'attributo all'import:


		from .const import(
			...,
			ATTR_TANK_TEMPERATURE,


5) daikin_base.py: definire le nuove property "support_xxx" e "xxx":


    @property
    def support_tank_temperature(self):
        """Return True if the device supports tank temperature measurement."""
        return self.getData(ATTR_TANK_TEMPERATURE) is not None

    @property
    def tank_temperature(self):
        """Return current tank temperature."""
        return float(self.getValue(ATTR_TANK_TEMPERATURE))


6) sensor.py: aggiungere l'attributo all'import:


	from .const import (
		...,
		ATTR_TANK_TEMPERATURE,


7) sensor.py: Append Se il sensore è supportato


        if device.support_tank_temperature:
            sensor = DaikinSensor.factory(device, ATTR_TANK_TEMPERATURE)
            _LOGGER.debug("DAMIANO append sensor = %s", sensor)
            sensors.append(sensor)


8) sensor.py: Aggiungere la proprietà di stato


		@property
		def state(self):
			"""Return the internal state of the sensor."""
			...
			if self._device_attribute == ATTR_TANK_TEMPERATURE:
				return self._device.tank_temperature
			return None


9) in caso di nuove tipologie di sensore (vedi esempio per "SENSOR_TYPE_INFO: DaikinInfoSensor"):

	9A) Aggiungere nuovo "SENSOR_TYPE" in const.py.

		SENSOR_TYPE_INFO = None

	9B) Aggiungere il nuovo SENSOR_TYPE fra i  SENSOR_TYPES in const.py.
		L'unità di misura va comunque compilata...

	    ATTR_CONTROL_MODE: {
        CONF_NAME: "Info Control Mode",
        CONF_TYPE: None,
        CONF_ICON: "mdi:information-outline",
        CONF_UNIT_OF_MEASUREMENT: " ",
    },

	9C) Importare il nuovo attributo in sensor.py

		from .const import (
			DOMAIN as DAIKIN_DOMAIN,
			DAIKIN_DEVICES,
			ATTR_COOL_ENERGY,
			...,
			ATTR_CONTROL_MODE,


	9E) Aggiungere il nuovo SENSOR_TYPE nella def factory in sensor.py

            cls = {
                SENSOR_TYPE_TEMPERATURE: DaikinClimateSensor,
                SENSOR_TYPE_POWER: DaikinEnergySensor,
                SENSOR_TYPE_ENERGY: DaikinEnergySensor,
                SENSOR_TYPE_INFO: DaikinInfoSensor,
            }[SENSOR_TYPES[monitored_state][CONF_TYPE]]
            return cls(device, monitored_state, period)

	9E) Aggiungere la classe per il nuovo SENSOR_TYPE in sensor.py
		con le due @property come nell'esempio.

			class DaikinInfoSensor(DaikinSensor):
				"""Representation of a Climate Sensor."""

				@property
				def state(self):
					"""Return the internal state of the sensor."""
					if self._device_attribute == ATTR_CONTROL_MODE:
						return self._device.control_mode

				@property
				def state_class(self):
					return STATE_CLASS_MEASUREMENT